/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  net.minecraft.data.DataGenerator
 *  net.minecraft.world.effect.MobEffect
 *  net.minecraft.world.effect.MobEffects
 *  net.minecraft.world.entity.ai.attributes.Attribute
 *  net.minecraft.world.item.Item
 *  net.minecraft.world.item.Items
 *  net.minecraft.world.item.alchemy.Potion
 */
package daripher.skilltree.data.generation.translation;

import daripher.skilltree.data.generation.translation.PSTTranslationProvider;
import daripher.skilltree.init.PSTAttributes;
import daripher.skilltree.init.PSTDamageConditions;
import daripher.skilltree.init.PSTEnchantmentConditions;
import daripher.skilltree.init.PSTEventListeners;
import daripher.skilltree.init.PSTItemConditions;
import daripher.skilltree.init.PSTItems;
import daripher.skilltree.init.PSTLivingConditions;
import daripher.skilltree.init.PSTMobEffects;
import daripher.skilltree.init.PSTNumericValueProviders;
import daripher.skilltree.init.PSTPotions;
import daripher.skilltree.init.PSTSkillBonuses;
import daripher.skilltree.init.PSTTags;
import daripher.skilltree.skill.bonus.SkillBonus;
import daripher.skilltree.skill.bonus.condition.damage.DamageCondition;
import daripher.skilltree.skill.bonus.condition.enchantment.EnchantmentCondition;
import daripher.skilltree.skill.bonus.condition.item.ItemCondition;
import daripher.skilltree.skill.bonus.condition.living.LivingCondition;
import daripher.skilltree.skill.bonus.condition.living.numeric.NumericValueProvider;
import daripher.skilltree.skill.bonus.event.SkillEventListener;
import daripher.skilltree.skill.bonus.player.GainedExperienceBonus;
import daripher.skilltree.skill.bonus.player.LootDuplicationBonus;
import net.minecraft.data.DataGenerator;
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.ai.attributes.Attribute;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.alchemy.Potion;

public class PSTEnglishTranslationProvider
extends PSTTranslationProvider {
    public PSTEnglishTranslationProvider(DataGenerator gen) {
        super(gen, "skilltree", "en_us");
    }

    protected void addTranslations() {
        this.add("skilltree:hunter", "Hunter");
        this.add("skilltree:alchemist", "Alchemist");
        this.add("skilltree:cook", "Cook");
        this.addSkill("alchemist", 1, "Alchemist");
        this.addSkills("alchemist", 2, 26, 29, "Poison Chance");
        this.addSkill("alchemist", 32, "Immunity Bypass");
        this.addSkill("alchemist", 49, "Weakness Chance");
        this.addSkill("alchemist", 52, "Wither Chance");
        this.addSkill("alchemist", 55, "Nausea Chance");
        this.addSkill("alchemist", 58, "Spreading Plague");
        this.addSkills("alchemist", 5, 8, 11, "Harmful Effects Duration");
        this.addSkill("alchemist", 14, "Deep Infection");
        this.addSkills("alchemist", 22, 25, 34, "Slowness Chance");
        this.addSkill("alchemist", 37, "Cruelty");
        this.addSkills("alchemist", 38, 41, 44, "Poison Damage");
        this.addSkill("alchemist", 60, "Melting Flesh");
        this.addSkills("alchemist", 3, 27, 30, "Beneficial Effects Duration");
        this.addSkill("alchemist", 33, "Overdose");
        this.addSkills("alchemist", 47, 50, 53, "Potion Healing");
        this.addSkill("alchemist", 56, "Limb Regeneration");
        this.addSkills("alchemist", 6, 9, 12, "Incoming Healing");
        this.addSkill("alchemist", 15, "Immune Response");
        this.addSkills("alchemist", 20, 23, 28, "Maximum Health");
        this.addSkill("alchemist", 35, "Mutation");
        this.addSkills("alchemist", 39, 42, 45, "Movement Speed");
        this.addSkill("alchemist", 61, "Adrenalin");
        this.addSkills("alchemist", 4, 17, 18, "Projectile Damage");
        this.addSkill("alchemist", 19, "More Gunpowder!");
        this.addSkills("alchemist", 48, 51, 54, "Additional Projectile Chance");
        this.addSkill("alchemist", 57, "Double Flasks");
        this.addSkills("alchemist", 7, 10, 13, "Magic Damage");
        this.addSkill("alchemist", 16, "Antimagic Field");
        this.addSkills("alchemist", 21, 24, 31, "Projectile Speed");
        this.addSkill("alchemist", 36, "Powerful Throw");
        this.addSkills("alchemist", 40, 43, 46, "Fire Damage");
        this.addSkill("alchemist", 59, "Incineration");
        this.addSkill("cook", 1, "Cook");
        this.addSkills("cook", 2, 26, 29, "Unarmed Damage");
        this.addSkill("cook", 32, "Heavy Punch");
        this.addSkills("cook", 49, 52, 55, "Unarmed Attack Speed");
        this.addSkill("cook", 58, "Iron Fist");
        this.addSkills("cook", 5, 8, 11, "Attack Damage");
        this.addSkill("cook", 14, "Spicy!");
        this.addSkills("cook", 22, 25, 34, "Melee Damage");
        this.addSkill("cook", 37, "Healthy Body");
        this.addSkills("cook", 38, 41, 44, "Unarmed Critical Hit Chance");
        this.addSkill("cook", 60, "Living Weapon");
        this.addSkills("cook", 4, 17, 18, "Maximum Health");
        this.addSkill("cook", 19, "Healthy Diet");
        this.addSkills("cook", 48, 51, 54, "Food Healing");
        this.addSkill("cook", 57, "Pile of Muscles");
        this.addSkills("cook", 7, 10, 13, "Incoming Healing");
        this.addSkill("cook", 16, "Accelerated Metabolism");
        this.addSkills("cook", 21, 24, 31, "Healing on Hit");
        this.addSkill("cook", 36, "Lifesteal");
        this.addSkills("cook", 40, 43, 46, "Saturation Chance");
        this.addSkill("cook", 59, "Comfort");
        this.addSkills("cook", 3, 27, 30, "Movement Speed While Eating");
        this.addSkill("cook", 33, "Snack");
        this.addSkills("cook", 47, 50, 53, "Food Usage Speed");
        this.addSkill("cook", 56, "Ambidexterity");
        this.addSkills("cook", 6, 9, 12, "Double Fishing Loot Chance");
        this.addSkill("cook", 15, "Sea Blessing");
        this.addSkills("cook", 20, 23, 28, "Experience From Fishing");
        this.addSkill("cook", 35, "Experienced Fisherman");
        this.addSkills("cook", 39, 42, 45, "Damage Taken While Fishing");
        this.addSkill("cook", 61, "Unseen Fisherman");
        this.addSkill("hunter", 1, "Hunter");
        this.addSkills("hunter", 2, 26, 29, "Leather Armor Durability");
        this.addSkill("hunter", 32, "Armor Fitting");
        this.addSkills("hunter", 49, 52, 55, "Damage Avoidance");
        this.addSkill("hunter", 58, "Acrobatics");
        this.addSkills("hunter", 5, 8, 11, "Armor");
        this.addSkill("hunter", 14, "Tanned Leather");
        this.addSkills("hunter", 22, 25, 34, "Movement Speed");
        this.addSkill("hunter", 37, "Elusiveness");
        this.addSkills("hunter", 38, 41, 44, "Projectile Damage Avoidance");
        this.addSkill("hunter", 60, "Double Layer Armor");
        this.addSkills("hunter", 4, 17, 18, "Projectile Speed");
        this.addSkill("hunter", 19, "Penetrating Shot");
        this.addSkills("hunter", 48, 51, 54, "Bow Shooting Speed");
        this.addSkill("hunter", 57, "Rapid Shot");
        this.addSkills("hunter", 7, 10, 13, "Movement Speed While Shooting");
        this.addSkill("hunter", 16, "Trained Archer");
        this.addSkills("hunter", 21, 24, 31, "Critical Projectile Damage");
        this.addSkill("hunter", 36, "Heavy Arrows");
        this.addSkills("hunter", 40, 43, 46, "Projectile Damage");
        this.addSkill("hunter", 59, "Ballistic Effect");
        this.addSkills("hunter", 3, 27, 30, "Mobs Loot Duplication");
        this.addSkill("hunter", 33, "Hunter's Trophy");
        this.addSkills("hunter", 47, 50, 53, "Chest Loot Duplication");
        this.addSkill("hunter", 56, "Treasure Hunt");
        this.addSkills("hunter", 6, 9, 12, "Arrow Retrieval Chance");
        this.addSkill("hunter", 15, "Careful Shot");
        this.addSkills("hunter", 20, 23, 28, "Experience From Mobs");
        this.addSkill("hunter", 35, "Experienced Hunter");
        this.addSkills("hunter", 39, 42, 45, "Luck");
        this.addSkill("hunter", 61, "Lucky Beggar");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.DAMAGE.get(), "Damage");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.CRIT_DAMAGE.get(), "Critical Damage Multiplier");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.CRIT_DAMAGE.get(), "damage", "Critical %s Damage Multiplier");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.CRIT_CHANCE.get(), "Critical Hit Chance");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.CRIT_CHANCE.get(), "damage", "%s Critical Hit Chance");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.BLOCK_BREAK_SPEED.get(), "Block break speed");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.REPAIR_EFFICIENCY.get(), "Repaired %s: %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.REPAIR_EFFICIENCY.get(), "bonus", "Durability restored");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.FREE_ENCHANTMENT.get(), "Chance to enchant item for free");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.JUMP_HEIGHT.get(), "Jump Height");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INCOMING_HEALING.get(), "Incoming Healing");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.LOOT_DUPLICATION.get(), "Chance to get %s %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.LOOT_DUPLICATION.get(), "multiplier", "+%s%%");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.LOOT_DUPLICATION.get(), "guaranteed", "You always get %s %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.LOOT_DUPLICATION.get(), "double", "double");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.LOOT_DUPLICATION.get(), "triple", "triple");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.GAINED_EXPERIENCE.get(), "Experience from %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_IGNITE.get(), "player", "You catch fire for %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_IGNITE.get(), "player.chance", "Chance to catch fire for %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_IGNITE.get(), "enemy", "Set enemies on fire for %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_IGNITE.get(), "enemy.chance", "Chance to set enemies on fire for %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ARROW_RETRIEVAL.get(), "Arrow retrieval chance");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.HEALTH_RESERVATION.get(), "Health Reservation");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ALL_ATTRIBUTES.get(), "All Attributes");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "player", "Gain %s%s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "player.chance", "Chance to gain %s%s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "enemy", "Inflict %s%s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "enemy.chance", "Chance to inflict %s%s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "seconds", " for %s seconds");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "minutes", " for %s minutes");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_EFFECT.get(), "stacks", "%s, stacks up to %s times");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.CANT_USE_ITEM.get(), "Can not use %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.HEALING.get(), "player", "Recover %s life");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.HEALING.get(), "player.chance", "Chance to recover %s life");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.HEALING.get(), "enemy", "Enemies recover %s life");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.HEALING.get(), "enemy.chance", "Chance for enemies to recover %s life");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_DAMAGE.get(), "player", "Take %s %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_DAMAGE.get(), "player.chance", "Chance to take %s %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_DAMAGE.get(), "enemy", "Inflict %s %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.INFLICT_DAMAGE.get(), "enemy.chance", "Chance to inflict %s %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.CAN_POISON_ANYONE.get(), "Your poisons can affect any enemies");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.LETHAL_POISON.get(), "Your poisons are lethal");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.DAMAGE_TAKEN.get(), "%s taken");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.DAMAGE_AVOIDANCE.get(), "Chance to avoid %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.DAMAGE_CONVERSION.get(), "%s%% of %s is being converted to %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.GRANT_ITEM.get(), "Grants %s when learned");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.GRANT_ITEM.get(), "amount", "Grants %sx %s when learned");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.EFFECT_DURATION.get(), "player", "Duration of %s on you");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.EFFECT_DURATION.get(), "enemy", "Duration of inflicted %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.PROJECTILE_DUPLICATION.get(), "chance", "Chance to fire additional projectile");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.PROJECTILE_DUPLICATION.get(), "amount", "Fire %s additional projectiles");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.PROJECTILE_DUPLICATION.get(), "Fire an additional projectile");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.SELF_SPLASH_IMMUNE.get(), "Your splash potions do not affect you");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.PROJECTILE_SPEED.get(), "Projectile Speed");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_DURABILITY_LOSS_AVOIDANCE.get(), "chance", "Chance to prevent %s durability loss");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_DURABILITY_LOSS_AVOIDANCE.get(), "Prevent %s durability loss");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_USAGE_SPEED.get(), "positive", "You use %s %s%% faster");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_USAGE_SPEED.get(), "negative", "You use %s %s%% slower");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_USE_MOVEMENT_SPEED.get(), "positive", "Reduces movement speed penalty from using %s by %s%%");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_USE_MOVEMENT_SPEED.get(), "remove", "Removes movement speed penalty from using %s");
        this.add((SkillBonus.Serializer)PSTSkillBonuses.ITEM_USE_MOVEMENT_SPEED.get(), "negative", "Increases movement speed penalty from using %s by %s%%");
        this.add(GainedExperienceBonus.ExperienceSource.MOBS.getDescriptionId(), "Mobs");
        this.add(GainedExperienceBonus.ExperienceSource.ORE.getDescriptionId(), "Ores");
        this.add(GainedExperienceBonus.ExperienceSource.FISHING.getDescriptionId(), "Fishing");
        this.add(LootDuplicationBonus.LootType.MOBS.getDescriptionId(), "mobs loot");
        this.add(LootDuplicationBonus.LootType.FISHING.getDescriptionId(), "fishing loot");
        this.add(LootDuplicationBonus.LootType.GEMS.getDescriptionId(), "gems from ore");
        this.add(LootDuplicationBonus.LootType.CHESTS.getDescriptionId(), "loot in chests");
        this.add(LootDuplicationBonus.LootType.ORE.getDescriptionId(), "loot from ore");
        this.add(LootDuplicationBonus.LootType.ARCHAEOLOGY.getDescriptionId(), "loot from archaeology");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_ITEM_EQUIPPED.get(), "target.player", "with");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_ITEM_EQUIPPED.get(), "target.enemy", "if enemy has");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_ITEM_EQUIPPED.get(), "%s %s %s equipped");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_EFFECT.get(), "target.player", "you are");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_EFFECT.get(), "target.enemy", "enemy is");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_EFFECT.get(), "%s if %s affected by %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_EFFECT.get(), "amplifier", "%s if %s affected by %s or higher");
        this.add((LivingCondition.Serializer)PSTLivingConditions.BURNING.get(), "target.player", "you are");
        this.add((LivingCondition.Serializer)PSTLivingConditions.BURNING.get(), "target.enemy", "enemy is");
        this.add((LivingCondition.Serializer)PSTLivingConditions.BURNING.get(), "%s if %s burning");
        this.add((LivingCondition.Serializer)PSTLivingConditions.FISHING.get(), "target.player", "you are");
        this.add((LivingCondition.Serializer)PSTLivingConditions.FISHING.get(), "target.enemy", "enemy is");
        this.add((LivingCondition.Serializer)PSTLivingConditions.FISHING.get(), "%s if %s fishing");
        this.add((LivingCondition.Serializer)PSTLivingConditions.UNDERWATER.get(), "target.player", "you are");
        this.add((LivingCondition.Serializer)PSTLivingConditions.UNDERWATER.get(), "target.enemy", "enemy is");
        this.add((LivingCondition.Serializer)PSTLivingConditions.UNDERWATER.get(), "%s if %s under water");
        this.add((LivingCondition.Serializer)PSTLivingConditions.DUAL_WIELDING.get(), "target.player", "you have");
        this.add((LivingCondition.Serializer)PSTLivingConditions.DUAL_WIELDING.get(), "target.enemy", "enemy has");
        this.add((LivingCondition.Serializer)PSTLivingConditions.DUAL_WIELDING.get(), "%s if %s %s in both hands");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_ITEM_IN_HAND.get(), "target.player", "with");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_ITEM_IN_HAND.get(), "target.enemy", "if enemy has");
        this.add((LivingCondition.Serializer)PSTLivingConditions.HAS_ITEM_IN_HAND.get(), "%s %s %s in hand");
        this.add((LivingCondition.Serializer)PSTLivingConditions.CROUCHING.get(), "target.player", "while crouching");
        this.add((LivingCondition.Serializer)PSTLivingConditions.CROUCHING.get(), "target.enemy", "if enemy is crouching");
        this.add((LivingCondition.Serializer)PSTLivingConditions.CROUCHING.get(), "%s %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.UNARMED.get(), "target.player", "while unarmed");
        this.add((LivingCondition.Serializer)PSTLivingConditions.UNARMED.get(), "target.enemy", "if enemy is unarmed");
        this.add((LivingCondition.Serializer)PSTLivingConditions.UNARMED.get(), "%s %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "more", "more than %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "less", "less than %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "equal", "equal to %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "at_least", "at least %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "at_most", "at most %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.ALL_ARMOR.get(), "target.player", "if all your armor is");
        this.add((LivingCondition.Serializer)PSTLivingConditions.ALL_ARMOR.get(), "target.enemy", "if all target's armor is");
        this.add((LivingCondition.Serializer)PSTLivingConditions.ALL_ARMOR.get(), "%s %s %s");
        this.add((SkillEventListener.Serializer)PSTEventListeners.ATTACK.get(), "%s on hit");
        this.add((SkillEventListener.Serializer)PSTEventListeners.ATTACK.get(), "damage", "%s on %s hit");
        this.add((SkillEventListener.Serializer)PSTEventListeners.BLOCK.get(), "%s on block");
        this.add((SkillEventListener.Serializer)PSTEventListeners.BLOCK.get(), "damage", "%s on %s block");
        this.add((SkillEventListener.Serializer)PSTEventListeners.EVASION.get(), "%s on evasion");
        this.add((SkillEventListener.Serializer)PSTEventListeners.ITEM_USED.get(), "%s on %s use");
        this.add((SkillEventListener.Serializer)PSTEventListeners.DAMAGE_TAKEN.get(), "%s when you take %s");
        this.add((SkillEventListener.Serializer)PSTEventListeners.ON_KILL.get(), "%s on kill");
        this.add((SkillEventListener.Serializer)PSTEventListeners.ON_KILL.get(), "damage", "%s on %s kill");
        this.add((SkillEventListener.Serializer)PSTEventListeners.SKILL_LEARNED.get(), "%s when you learn this");
        this.add((SkillEventListener.Serializer)PSTEventListeners.SKILL_REMOVED.get(), "%s when this skill is removed");
        this.add((SkillEventListener.Serializer)PSTEventListeners.TICKING.get(), "%s every second");
        this.add((DamageCondition.Serializer)PSTDamageConditions.PROJECTILE.get(), "Projectile Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.PROJECTILE.get(), "type", "Projectile");
        this.add((DamageCondition.Serializer)PSTDamageConditions.MELEE.get(), "Melee Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.MELEE.get(), "type", "Melee");
        this.add((DamageCondition.Serializer)PSTDamageConditions.MAGIC.get(), "Magic Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.MAGIC.get(), "type", "Magic");
        this.add((DamageCondition.Serializer)PSTDamageConditions.NONE.get(), "Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.FALL.get(), "Fall Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.FALL.get(), "type", "Fall");
        this.add((DamageCondition.Serializer)PSTDamageConditions.FIRE.get(), "Fire Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.FIRE.get(), "type", "Fire");
        this.add((DamageCondition.Serializer)PSTDamageConditions.POISON.get(), "Poison Damage");
        this.add((DamageCondition.Serializer)PSTDamageConditions.POISON.get(), "type", "Poison");
        this.deathMessage("poison", "%1$s died from poison");
        this.deathMessage("poison.player", "%1$s was poisoned by %2$s");
        this.add((EnchantmentCondition.Serializer)PSTEnchantmentConditions.WEAPON.get(), "Weapon Enchantments");
        this.add((EnchantmentCondition.Serializer)PSTEnchantmentConditions.ARMOR.get(), "Armor Enchantments");
        this.add((EnchantmentCondition.Serializer)PSTEnchantmentConditions.NONE.get(), "Enchantments");
        this.add((ItemCondition.Serializer)PSTItemConditions.NONE.get(), "Item");
        this.add((ItemCondition.Serializer)PSTItemConditions.NONE.get(), "plural", "Items");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "weapon", "Weapon");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "weapon.plural", "Weapons");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "ranged_weapon", "Ranged Weapon");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "ranged_weapon.plural", "Ranged Weapons");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "bow", "Bow");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "bow.plural", "Bows");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "crossbow", "Crossbow");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "crossbow.plural", "Crossbows");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "melee_weapon", "Melee Weapon");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "melee_weapon.plural", "Melee Weapons");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "sword", "Sword");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "sword.plural", "Swords");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "trident", "Trident");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "trident.plural", "Tridents");
        this.add(PSTTags.Items.RINGS, "Ring");
        this.add(PSTTags.Items.RINGS, "plural", "Rings");
        this.add(PSTTags.Items.NECKLACES, "Necklace");
        this.add(PSTTags.Items.NECKLACES, "plural", "Necklaces");
        this.add(PSTTags.Items.QUIVERS, "Quiver");
        this.add(PSTTags.Items.QUIVERS, "plural", "Quivers");
        this.add(PSTTags.Items.LEATHER_ARMOR, "Leather Armor");
        this.add(PSTTags.Items.LEATHER_ARMOR, "plural", "Leather Armor");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "armor", "Armor");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "helmet", "Helmet");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "helmet.plural", "Helmets");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "chestplate", "Chestplate");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "chestplate.plural", "Chestplates");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "leggings", "Leggings");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "boots", "Boots");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "shield", "Shield");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "shield.plural", "Shields");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "any", "Equipment");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "any", "Potion");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "any.plural", "Potions");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "beneficial", "Beneficial Potion");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "beneficial.plural", "Beneficial Potions");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "harmful", "Harmful Potion");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "harmful.plural", "Harmful Potions");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "neutral", "Neutral Potion");
        this.add((ItemCondition.Serializer)PSTItemConditions.POTIONS.get(), "neutral.plural", "Neutral Potions");
        this.add((ItemCondition.Serializer)PSTItemConditions.FOOD.get(), "Food");
        this.add(PSTTags.Items.JEWELRY, "Jewelry");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "tool", "Tool");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "tool.plural", "Tools");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "axe", "Axe");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "axe.plural", "Axes");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "hoe", "Hoe");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "hoe.plural", "Hoes");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "pickaxe", "Pickaxe");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "pickaxe.plural", "Pickaxes");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "shovel", "Shovel");
        this.add((ItemCondition.Serializer)PSTItemConditions.EQUIPMENT_TYPE.get(), "shovel.plural", "Shovels");
        this.add((ItemCondition.Serializer)PSTItemConditions.ENCHANTED.get(), "Enchanted %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "multiplier.player.plural", "%s per %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "multiplier.player", "%s per 1 %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "multiplier.enemy.plural", "%s per %s enemy's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "multiplier.enemy", "%s per 1 enemy's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "condition.player", "%s if %s is %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "condition.enemy", "%s if enemy's %s is %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ATTRIBUTE_VALUE.get(), "requirement", "Reach %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.DISTANCE_TO_TARGET.get(), "multiplier.player.plural", "%s per %s blocks between you and enemy");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.DISTANCE_TO_TARGET.get(), "multiplier.player", "%s per block between you and enemy");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.DISTANCE_TO_TARGET.get(), "condition.player", "%s if distance to target is %s");
        this.add("effect_type.beneficial", "beneficial effect");
        this.add("effect_type.beneficial.plural", "beneficial effects");
        this.add("effect_type.harmful", "harmful effect");
        this.add("effect_type.harmful.plural", "harmful effects");
        this.add("effect_type.neutral", "neutral effect");
        this.add("effect_type.neutral.plural", "neutral effects");
        this.add("effect_type.any", "effect");
        this.add("effect_type.any.plural", "effects");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "multiplier.player.plural", "%s per %s %s on you");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "multiplier.player", "%s per %s on you");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "multiplier.enemy.plural", "%s per %s %s on target");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "multiplier.enemy", "%s per %s on target");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "condition.player", "%s while affected by %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "condition.player.any", "%s while affected by any %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "condition.player.none", "%s while not affected by any %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "condition.enemy", "%s if target is affected by %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "condition.enemy.any", "%s if target is affected by any %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "condition.enemy.none", "%s if target is not affected by any %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EFFECT_AMOUNT.get(), "requirement", "Have %s %s on you");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "equal.effect_amount", "exactly %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "multiplier.player.plural", "%s per %s enchantments on your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "multiplier.player", "%s per enchantment on your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "multiplier.enemy.plural", "%s per %s enchantments on target's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "multiplier.enemy", "%s per enchantment on target's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "enchantment", "enchantment");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "enchantment.plural", "enchantments");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "condition.player", "%s if you have %s %s on %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "condition.player.any", "%s if your %s is enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "condition.player.none", "%s if your %s is not enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "condition.enemy", "%s if target has %s %s on %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "condition.enemy.any", "%s if target's %s is enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "condition.enemy.none", "%s if target's %s is not enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_AMOUNT.get(), "requirement", "Have %s %s on your %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "equal.enchantment_amount", "exactly %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "multiplier.player.plural", "%s per %s enchantment levels on your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "multiplier.player", "%s per enchantment level on your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "multiplier.enemy.plural", "%s per %s enchantment levels on target's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "multiplier.enemy", "%s per enchantment level on target's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "level", "level");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "level.plural", "levels");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "condition.player", "%s if you have %s enchantment %s on %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "condition.player.any", "%s if your %s is enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "condition.player.none", "%s if your %s is not enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "condition.enemy", "%s if target has %s enchantment %s on %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "condition.enemy.any", "%s if target's %s is enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "condition.enemy.none", "%s if target's %s is not enchanted");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.ENCHANTMENT_LEVELS.get(), "requirement", "Have %s enchantment %s on your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "multiplier.player.plural", "%s per %s durability of your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "multiplier.player", "%s per durability of your %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "multiplier.enemy.plural", "%s per %s durability of target's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "multiplier.enemy", "%s per durability of target's %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "condition.player", "%s if your %s has %s durability");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "condition.enemy", "%s if target's has %s %s durability");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.EQUIPMENT_DURABILITY.get(), "requirement", "Have %s %s on your %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "equal.equipment_durability", "exactly %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "point", "hunger point");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "point.plural", "hunger points");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.player", "%s per current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.player.plural", "%s per %s current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.player.missing", "%s per missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.player.plural.missing", "%s per %s missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.enemy", "%s per target's current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.enemy.plural", "%s per %s target's current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.enemy.missing", "%s per target's missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "multiplier.enemy.plural.missing", "%s per %s target's missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.player", "%s if you have %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.enemy", "%s if target has %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.player.missing", "%s if you are missing %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.enemy.missing", "%s if target is missing %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.player.full", "%s if you are not hungry");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.enemy.full", "%s if target is not hungry");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.player.not_full", "%s if you are hungry");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "condition.enemy.not_full", "%s if target is hungry");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.FOOD_LEVEL.get(), "requirement", "Have %s %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "equal.food_level", "exactly %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "point", "health point");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "point.plural", "health points");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.player", "%s per current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.player.plural", "%s per %s current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.player.missing", "%s per missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.player.plural.missing", "%s per %s missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.enemy", "%s per target's current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.enemy.plural", "%s per %s target's current %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.enemy.missing", "%s per target's missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "multiplier.enemy.plural.missing", "%s per %s target's missing %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.player", "%s if you have %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.enemy", "%s if target has %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.player.missing", "%s if you are missing %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.enemy.missing", "%s if target is missing %s %s");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.player.full", "%s while at full health");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.enemy.full", "%s if target is at full health");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.player.not_full", "%s while injured");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "condition.enemy.not_full", "%s if target is injured");
        this.add((NumericValueProvider.Serializer)PSTNumericValueProviders.HEALTH_LEVEL.get(), "requirement", "Have %s %s");
        this.add((LivingCondition.Serializer)PSTLivingConditions.NUMERIC_VALUE.get(), "equal.health_level", "exactly %s");
        this.add("recipe.skilltree.weapon_poisoning", "Weapon Poisoning");
        this.add("recipe.skilltree.weapon_poisoning.info", "(Combine a melee weapon and a harmful potion on a crafting bench to poison a weapon)");
        this.add("recipe.skilltree.potion_mixing", "Potion Mixing");
        this.add("recipe.skilltree.potion_mixing.info", "(Combine two different potions on a crafting bench to create a mixture)");
        this.add("upgrade_recipe.chance", "Chance: %s%%");
        this.add("potion.superior", "Superior %s");
        this.add("item.minecraft.potion.mixture", "Mixture");
        this.add("item.minecraft.splash_potion.mixture", "Splash Mixture");
        this.add("item.minecraft.lingering_potion.mixture", "Lingering Mixture");
        this.addMixture("Diving", MobEffects.f_19611_, MobEffects.f_19608_);
        this.addMixture("Eternal Youth", MobEffects.f_19601_, MobEffects.f_19605_);
        this.addMixture("Sickness", MobEffects.f_19614_, MobEffects.f_19613_);
        this.addMixture("Owl", MobEffects.f_19609_, MobEffects.f_19611_);
        this.addMixture("Coward", MobEffects.f_19609_, MobEffects.f_19596_);
        this.addMixture("Dragon Blood", MobEffects.f_19607_, MobEffects.f_19605_);
        this.addMixture("Demon", MobEffects.f_19607_, MobEffects.f_19600_);
        this.addMixture("Assasin", MobEffects.f_19602_, MobEffects.f_19614_);
        this.addMixture("Antigravity", MobEffects.f_19603_, MobEffects.f_19591_);
        this.addMixture("Aging", MobEffects.f_19597_, MobEffects.f_19613_);
        this.addMixture("Athlete", MobEffects.f_19603_, MobEffects.f_19596_);
        this.addMixture("Thief", MobEffects.f_19609_, MobEffects.f_19621_);
        this.addMixture("Treasure Hunter", MobEffects.f_19621_, MobEffects.f_19608_);
        this.addMixture("Knight", MobEffects.f_19605_, MobEffects.f_19600_);
        this.addMixture("Slow Motion", MobEffects.f_19591_, MobEffects.f_19597_);
        this.addMixture("Soldier", MobEffects.f_19601_, MobEffects.f_19600_);
        this.addMixture("Ninja", MobEffects.f_19600_, MobEffects.f_19596_);
        this.addMixture("Blessing", MobEffects.f_19621_, MobEffects.f_19600_);
        this.addMixture("Plague", MobEffects.f_19614_, MobEffects.f_19597_);
        this.add("gem.socket", "Empty Socket");
        this.add("gem.additional_socket_1", "\u2022 Has an additional socket");
        this.add("gem.disabled", "Disabled with Apotheosis adventure module enabled");
        this.add("gem_class_format", "\u2022 %s: %s");
        this.add("gem.tooltip", "\u2022 Can be inserted into items with sockets");
        this.add("gem_bonus.removal", "Destroys gems in the item");
        this.add("gem_bonus.random", "Outcome unpredictable");
        this.add("weapon.poisoned", "Poisoned:");
        this.add("quiver.capacity", "\u2022 Can hold up to %s arrows");
        this.add("quiver.contents", "\u2022 Contents: %s");
        this.add("item.cant_use.info", "You can not use this");
        this.addGem("citrine", "Citrine");
        this.addGem("ruby", "Ruby");
        this.addGem("sapphire", "Sapphire");
        this.addGem("jade", "Jade");
        this.addGem("iriscite", "Iriscite");
        this.addGem("vacucite", "Vacucite");
        this.add((Item)PSTItems.WISDOM_SCROLL.get(), "Wisdom Scroll");
        this.add((Item)PSTItems.AMNESIA_SCROLL.get(), "Amnesia Scroll");
        this.addTooltip((Item)PSTItems.WISDOM_SCROLL.get(), "Grants one passive skill point");
        this.addTooltip((Item)PSTItems.AMNESIA_SCROLL.get(), "Resets your passive skill tree");
        this.addWarning((Item)PSTItems.AMNESIA_SCROLL.get(), "%d%% of your skill points will be lost");
        this.add("ancient_material.tooltip", "Requires certain knowledge to be used");
        this.addCurioSlot("ring", "Ring Slot");
        this.addCurioSlot("ring", "plural", "Ring Slots");
        this.addCurioSlot("necklace", "Necklace Slot");
        this.addCurioSlot("necklace", "plural", "Necklace Slots");
        this.add((Attribute)PSTAttributes.REGENERATION.get(), "Life Regeneration");
        this.add((Attribute)PSTAttributes.EXP_PER_MINUTE.get(), "Experience Per Minute");
        this.add((MobEffect)PSTMobEffects.LIQUID_FIRE.get(), "Liquid Fire");
        this.add((Potion)PSTPotions.LIQUID_FIRE_1.get(), "Liquid Fire");
        this.add((Potion)PSTPotions.LIQUID_FIRE_2.get(), "Liquid Fire");
        this.add("skilltree.message.reset", "Skill Tree has changed. Your skill points have been restored.");
        this.add("skilltree.message.reset_command", "Your skill tree has been reset.");
        this.add("skilltree.message.point_command", "Skill point gained.");
        this.add("widget.skill_points_left", "Points left: %s");
        this.add("widget.skill_button.not_learned", "Skill not learned");
        this.add("widget.buy_skill_button", "Buy Skill Point");
        this.add("widget.skill_button.multiple_bonuses", "%s and %s");
        this.add("widget.confirm_button", "Confirm");
        this.add("widget.cancel_button", "Cancel");
        this.add("widget.show_stats", "Show Stats");
        this.add("key.categories.skilltree", "Passive Skill Tree");
        this.add("key.display_skill_tree", "Open Skill Tree");
        this.add("skill.limitation", "Limited to: %s");
        this.add("skilltree.jei.gem_info", "Gems can be inserted into items with sockets on a smithing table. Drop from any ore with a small chance (requires no silk touch tool).");
        this.add("itemGroup.skilltree", "Passive Skill Tree");
        this.add("item.modifiers.both_hands", "When Held:");
        this.add("text.apotheosis.category.curios:ring.plural", "Rings");
        this.add("text.apotheosis.category.curios:necklace.plural", "Necklaces");
        this.add("gem_class.jewelry", "Jewelry");
        this.add("affix.skilltree:jewelry/dmg_reduction/tempered", "Tempered");
        this.add("affix.skilltree:jewelry/dmg_reduction/tempered.suffix", "of Hardening");
        this.add("affix.skilltree:jewelry/attribute/immortal", "Immortal");
        this.add("affix.skilltree:jewelry/attribute/immortal.suffix", "of Immortality");
        this.add("affix.skilltree:jewelry/attribute/experienced", "Experienced");
        this.add("affix.skilltree:jewelry/attribute/experienced.suffix", "of Experience");
        this.add("affix.skilltree:jewelry/attribute/lucky", "Lucky");
        this.add("affix.skilltree:jewelry/attribute/lucky.suffix", "of Luck");
        this.add("affix.skilltree:jewelry/attribute/hasty", "Hasty");
        this.add("affix.skilltree:jewelry/attribute/hasty.suffix", "of Haste");
        this.add("affix.skilltree:jewelry/attribute/hidden", "Hidden");
        this.add("affix.skilltree:jewelry/attribute/hidden.suffix", "of Hiding");
        this.add("affix.skilltree:jewelry/attribute/healthy", "Healthy");
        this.add("affix.skilltree:jewelry/attribute/healthy.suffix", "of Health");
    }

    protected void addMixture(String name, MobEffect ... effects) {
        name = "Mixture of " + (String)name;
        this.addMixture((String)name, "potion", effects);
        this.addMixture("Splash " + (String)name, "splash_potion", effects);
        this.addMixture("Lingering " + (String)name, "lingering_potion", effects);
    }

    protected void add(Potion potion, String name) {
        this.add(potion.m_43492_(Items.f_42589_.m_5524_() + ".effect."), "Potion of " + name);
        this.add(potion.m_43492_(Items.f_42736_.m_5524_() + ".effect."), "Splash Potion of " + name);
        this.add(potion.m_43492_(Items.f_42739_.m_5524_() + ".effect."), "Lingering Potion of " + name);
    }

    protected void addGem(String type, String name) {
        super.addGem(type, name, "Crumbled", "Broken", "Low-Quality", "Big", "Rare", "Exceptional");
    }
}

